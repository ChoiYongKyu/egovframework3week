<?xml version="1.0" encoding="UTF-8"?>
<!-- web.xml? 스프링 설정 파일을 명시해 주는 곳 -->

<!-- 참고사이트 : http://outliers.tistory.com/entry/JSP-Webxml-%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC -->

<!-- 루트 엘리먼트? xml 문서는 하나의 루트 엘리먼트를 가져야 함 -->
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
		xmlns="http://java.sun.com/xml/ns/javaee" 
		xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" 
		id="WebApp_ID" 
		version="3.0">
		
<!-- gui툴이 웹애플리케이션을 표시하기 위햇 사용하는 이름을 지정하는데 사용 -->
<!-- 프로젝트 명으로 설정 -->
  <display-name>com.nos.mm</display-name>
  
<!-- 애플리케이션 초기화 파라미터? 모든 웹 애플리케이션에서 파라미터를 공유하기 위해서 사용 -->
  <context-param>
  	<!-- 스프링 설정파일을 읽기 위해서 org.springframework.web.context.ContextLoaderListener이 필요하다 -->
  	<!-- 이 리스너가 동작하는데 설정파일의 위치를 알려주어야 하므로 contextConfigLocation으로 위치를 알려줌 -->
    <param-name>contextConfigLocation</param-name>
    <param-value>
			classpath:config/spring/root-context.xml
			classpath:config/spring/spring-mybatis.xml
			classpath:config/spring/security-context.xml
	</param-value> 
  </context-param>
 
 <!-- 어떠한 이벤트가 발생하면 호출되어 처리하는 객체 -->
  <listener>
  <!-- 스프링 설정파일을 읽기 위해서 -->
    <listener-class>
			org.springframework.web.context.ContextLoaderListener
	</listener-class>
  </listener>
 <!-- =========================================================== -->
 
 <!-- servlet & servlet-mapping -->
 <!-- 웹서버가 웹브라우저로부터 URL을 받았을 때 서블릿 클래스를 찾아서 호출하기 위한 정보 기록 -->
  <!-- 서블릿클래스의 이름이 들어감 -->
  <!-- servlet과 servlet-mapping의 이름이 같으면 됨 (xxxx-servlet.xml로 다시 설정을 자동으로 걸어줌) -->
  <!-- 본 방식은 수동으로 걸어줌 -->
  <servlet>
    <servlet-name>dispatcher</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>
  			classpath:config/spring/spring-mvc.xml
  		</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <!-- 서블릿클래스 호출시 사용할 URL이 들어감 -->
  <servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <url-pattern>*.do</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <url-pattern>*.json</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>
<!-- =========================================================== -->
  
<!-- Encoding Filter -->
  <!-- 한글처리 (post방식) -->
  <filter>
    <filter-name>encodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>  
           <param-name>forceEncoding</param-name>  
           <param-value>true</param-value>  
        </init-param>
  </filter>
  
  <filter-mapping>
    <filter-name>encodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
<!-- =========================================================== -->

<!-- 스프링 시큐리티 -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

<!-- =========================================================== -->
	<!-- 세션 타임아웃 시간 설정 (분단위) -->
	<session-config>
		<session-timeout>360</session-timeout>
	</session-config>

	<!-- 로그를 남기기 위한 유틸리티 -->
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>
  
	<!-- log4j 설정 파일의 위치를 지정 -->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:config/log4j.xml</param-value>
	</context-param>
	
	<!-- log4jRefreshInterval 을 세팅하면 log4j.xml 에서 level 이나 로그출력 패턴 변경을 하면 자동 리프레쉬 된다. -->
    <context-param>
        <param-name>log4jRefreshInterval</param-name>
        <param-value>60000</param-value>
    </context-param>
    
	<!-- 톰캣에서 여러 컨텍스트가 있는데 여러 컨텍스트에서 log4j를 사용할 경우 값을 지정해야함-->
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>webapp.mm</param-value>
	</context-param>
  
<!-- =========================================================== -->
	<!-- XSS 방지 -->
<!-- 	<filter> -->
<!-- 		<filter-name>XSS</filter-name> -->
<!-- 		<filter-class>com.nos.mm.util.XSSFilter</filter-class> -->
<!-- 	</filter> -->
<!-- 	<filter-mapping> -->
<!-- 		<filter-name>XSS</filter-name> -->
<!-- 		<url-pattern>/*</url-pattern> -->
<!-- 	</filter-mapping> -->

	<!-- 네이버 lucy XSS 방지 라이브러리-->
	<filter>
		<filter-name>xssEscapeServletFilter</filter-name>
		<filter-class>com.navercorp.lucy.security.xss.servletfilter.XssEscapeServletFilter</filter-class>
	</filter>
	<filter-mapping>
	    <filter-name>xssEscapeServletFilter</filter-name>
	    <url-pattern>/*</url-pattern>
	</filter-mapping>
 
<!-- =========================================================== -->

<!-- jsp에서 기능 사용여부 -->
  <jsp-config>
  	<!-- 해달 URL 패턴 요청시 자동 인클루드 -->
  	<!-- prelude : 상단 / coda : 하단 -->
  	<jsp-property-group>
  		<url-pattern>*.jsp</url-pattern>
  		<page-encoding>UTF-8</page-encoding>
  		<include-prelude>/WEB-INF/common/base.jsp</include-prelude>
  	</jsp-property-group>
  	<jsp-property-group>
  		<url-pattern>*.jsp</url-pattern>
  		<page-encoding>UTF-8</page-encoding>
  		<include-coda>/WEB-INF/common/footer.jsp</include-coda>
  	</jsp-property-group>
  </jsp-config>
  
<!-- URL이 파일명이 아닌 디렉토리명으로 받았을때 기존적으로 불러올 파일명 지정하는 곳 -->
  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>
  
 <!-- 에러페이지 -->
 	<error-page>
 		<error-code>404</error-code>
 		<location>/error/404</location>
 	</error-page>
 	
 	<error-page>
 		<error-code>400</error-code>
 		<location>/error/400</location>
 	</error-page>

 	<error-page>
 		<error-code>500</error-code>
 		<location>/WEB-INF/view/error.jsp</location>
 	</error-page>
</web-app>