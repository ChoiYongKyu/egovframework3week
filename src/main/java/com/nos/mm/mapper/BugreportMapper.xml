<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.nos.mm.mapper.BugreportMapper">
<resultMap type="map" id="clobinvert">
	<result property="BUGREPORT_PROBLEM" column="BUGREPORT_PROBLEM" jdbcType="CLOB" javaType="java.lang.String"/>
	<result property="BUGREPORT_ANSWER" column="BUGREPORT_ANSWER" jdbcType="CLOB" javaType="java.lang.String"/>
	<result property="BUGREPORT_REPLY_ANSWER" column="BUGREPORT_REPLY_ANSWER" jdbcType="CLOB" javaType="java.lang.String"/>
</resultMap>


	<select id="getClient" resultType="map">
		SELECT CLIENT_NO,
		       CLIENT_NAME
		FROM CLIENT
		ORDER BY CLIENT_NAME
	</select>
	<select id="getProduct" resultType="map" parameterType="map">
		SELECT DISTINCT UP.PRODUCT_NO,
		       			P.PRODUCT_NAME
		FROM USE_PRODUCT UP
		JOIN PRODUCT P
		ON UP.PRODUCT_NO = P.PRODUCT_NO
		WHERE UP.CLIENT_NO = #{cList }
	</select>

	<select id="getVersion" resultType="map" parameterType="map">
		SELECT DISTINCT 
                VM.VERSION_NO,
                VM.VERSION
		FROM USE_PRODUCT UP
		JOIN PRODUCT P
		ON UP.PRODUCT_NO = P.PRODUCT_NO
	    JOIN VERSION_MANAGEMENT VM
	    ON UP.PRODUCT_NO = VM.PRODUCT_NO
		WHERE UP.CLIENT_NO = #{cList } AND P.PRODUCT_NO = #{pList } AND VM.VERSION_KIND = #{vkList}
	</select>
	
	<select id="getList" resultMap="clobinvert" parameterType="map">
	<![CDATA[
		SELECT * 
		FROM (SELECT ROWNUM AS RNUM, A.*,
		COUNT(*) OVER() COUNT
			FROM(SELECT T.BUGREPORT_NO
				       ,CASE 
			              WHEN LENGTH(T.BUGREPORT_PROBLEM)>100 THEN SUBSTR(T.BUGREPORT_PROBLEM ,0,100) || '...'
			              WHEN LENGTH(T.BUGREPORT_PROBLEM)<100 THEN T.BUGREPORT_PROBLEM
			              END AS BUGREPORT_PROBLEM
		               ,CASE 
			              WHEN LENGTH(T.BUGREPORT_ANSWER)>100 THEN SUBSTR(T.BUGREPORT_ANSWER ,0,100) || '...'
			              WHEN LENGTH(T.BUGREPORT_ANSWER)<100 THEN T.BUGREPORT_ANSWER
			              END AS BUGREPORT_ANSWER
				       , TO_CHAR(T.BUGREPORT_WRITE_DATE, 'yyyy-mm-dd hh24:mi:ss') AS BUGREPORT_WRITE_DATE
				       , VM.VERSION 
				       , VM.VERSION_KIND
				       , P.PRODUCT_NAME
				       , C.CLIENT_NAME
				       , M.MEM_NAME
				FROM BUGREPORT T
				LEFT JOIN PRODUCT P
				ON T.PRODUCT_NO = P.PRODUCT_NO
				LEFT JOIN CLIENT C
				ON T.CLIENT_NO = C.CLIENT_NO
				LEFT JOIN VERSION_MANAGEMENT VM
				ON T.VERSION_NO = VM.VERSION_NO
				LEFT JOIN MEMBER M
				ON T.MEM_NO = M.MEM_NO
				]]>
				<if test="searchText != null">
					RIGHT JOIN (
						SELECT T.BUGREPORT_NO 
						FROM BUGREPORT T
						     LEFT JOIN BUGREPORT_REPLY R
						     ON T.BUGREPORT_NO = R.BUGREPORT_NO
						WHERE T.BUGREPORT_PROBLEM LIKE '%' || #{searchText} || '%'
						     OR T.BUGREPORT_ANSWER LIKE '%' || #{searchText} || '%' 
						     OR R.BUGREPORT_REPLY_ANSWER LIKE '%' || #{searchText} || '%' 
						     GROUP BY T.BUGREPORT_NO) G
        			ON G.BUGREPORT_NO = T.BUGREPORT_NO
				</if>
				ORDER BY T.BUGREPORT_NO DESC) A)
				<![CDATA[
		     		WHERE RNUM >= ((#{page } - 1) * #{list_size }) + 1 AND RNUM <= #{page } * #{list_size }
		        ]]>
	</select>
	
	<select id="getDetail" parameterType="int" resultMap="clobinvert">
		SELECT T.BUGREPORT_NO,
		       T.BUGREPORT_PROBLEM,
		       T.BUGREPORT_ANSWER,
		       T.BUGREPORT_WRITE_DATE,
		       M.MEM_NAME,
		       C.CLIENT_NAME,
		       P.PRODUCT_NAME,
		       VM.VERSION,
		       VM.VERSION_KIND
		FROM BUGREPORT T
		LEFT JOIN MEMBER M
		ON T.MEM_NO = M.MEM_NO
		LEFT JOIN CLIENT C
		ON T.CLIENT_NO = C.CLIENT_NO
		LEFT JOIN PRODUCT P
		ON T.PRODUCT_NO = P.PRODUCT_NO
		LEFT JOIN VERSION_MANAGEMENT VM
		ON T.VERSION_NO = VM.VERSION_NO
		WHERE BUGREPORT_NO = #{no }
	</select>
	
	<select id="getReply" resultMap="clobinvert" parameterType="map">
		SELECT R.BUGREPORT_REPLY_NO,
		       R.BUGREPORT_REPLY_ANSWER,
		       R.MEM_NO,
		       TO_CHAR(R.BUGREPORT_REPLY_WRITE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS BUGREPORT_REPLY_WRITE_DATE,
		       M.MEM_NAME
		FROM BUGREPORT_REPLY R
		LEFT JOIN MEMBER M
		ON R.MEM_NO = M.MEM_NO
		WHERE R.BUGREPORT_NO = #{no }
		ORDER BY R.BUGREPORT_REPLY_NO
	</select>
	
	<select id="getModify" parameterType="int" resultMap="clobinvert">
		SELECT T.BUGREPORT_NO,
		       T.BUGREPORT_PROBLEM,
		       T.BUGREPORT_ANSWER,
		       T.BUGREPORT_WRITE_DATE,
		       M.MEM_NAME,
		       T.CLIENT_NO,
		       C.CLIENT_NAME,
		       T.PRODUCT_NO,
		       P.PRODUCT_NAME,
		       T.VERSION_NO,
		       VM.VERSION,
		       VM.VERSION_KIND
		FROM BUGREPORT T
		LEFT JOIN MEMBER M
		ON T.MEM_NO = M.MEM_NO
		LEFT JOIN CLIENT C
		ON T.CLIENT_NO = C.CLIENT_NO
		LEFT JOIN PRODUCT P
		ON T.PRODUCT_NO = P.PRODUCT_NO
		LEFT JOIN VERSION_MANAGEMENT VM
		ON T.VERSION_NO = VM.VERSION_NO
		WHERE BUGREPORT_NO = #{no }
	</select>
	
	<insert id="insert" parameterType="map">
		INSERT INTO BUGREPORT(BUGREPORT_NO,
                  BUGREPORT_PROBLEM,
                  BUGREPORT_ANSWER,
                  MEM_NO,
                  BUGREPORT_WRITE_DATE,
                  CLIENT_NO,
                  PRODUCT_NO,
                  VERSION_NO)
          VALUES (bugreport_seq.nextval, 
          		 #{bugreport_problem },
          		 #{bugreport_answer }, 
          		 #{mem_no }, 
          		 sysdate, 
          		 #{cList },
          		 #{pList },
          		 #{vList })
    	<selectKey keyProperty="bugreport_no" order="AFTER" resultType="int">
			SELECT BUGREPORT_SEQ.CURRVAL FROM DUAL
		</selectKey> 
	</insert>
	
	<insert id="insertReply" parameterType="map">
		INSERT INTO BUGREPORT_REPLY(BUGREPORT_REPLY_NO,
                  BUGREPORT_REPLY_ANSWER,
                  MEM_NO,
                  BUGREPORT_REPLY_WRITE_DATE,
                  BUGREPORT_NO)
            VALUES(bugreport_reply_seq.nextval,
                   #{insertReply },
                   #{mem_no },
                   sysdate,
                   #{bugreport_no })
	</insert>
	
	<update id="modifyReply">
		UPDATE BUGREPORT_REPLY
        SET BUGREPORT_REPLY_ANSWER = #{reply_answer},
        	BUGREPORT_REPLY_WRITE_DATE = SYSDATE
        WHERE BUGREPORT_REPLY_NO = #{reply_no}
	</update>
	
	<delete id="deleteReply" parameterType="int">
		DELETE FROM BUGREPORT_REPLY
		WHERE BUGREPORT_REPLY_NO = #{no}
	</delete>
	
	<insert id="insertModify" parameterType="map">
		UPDATE BUGREPORT SET
		                  BUGREPORT_PROBLEM = #{bugreport_problem },
		                  BUGREPORT_ANSWER = #{bugreport_answer },
		                  BUGREPORT_WRITE_DATE = SYSDATE,
		                  CLIENT_NO = #{cList },
		                  PRODUCT_NO = #{pList },
		                  VERSION_NO = #{vList }
		WHERE BUGREPORT_NO = #{bugreport_no }
	</insert>
	
	<delete id="doDelete">
		DELETE
		FROM BUGREPORT
		WHERE BUGREPORT_NO = #{bugreport_no }
	</delete>
</mapper>