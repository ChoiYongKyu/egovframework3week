<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">


	<tx:annotation-driven />
	<aop:aspectj-autoproxy />

	<!-- property-placeholder를 여러개 쓰면 에러가 뜨므로 하나만 써야함!! 그래서 root-context.xml에 
		추가했음 -->
	<!-- db.properties 읽어옴 -->
	<!-- <context:property-placeholder location="classpath:config/mybatis/db.properties"/> -->

	<!-- 오라클 DB -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close" p:driverClassName="${jdbc.mysql.driver}" p:url="${jdbc.mysql.url}"
		p:username="${jdbc.mysql.username}" p:password="${jdbc.mysql.password}" />

	<!-- 마이바티스 -->
	<!-- mapperLocations : mapper xml 위치 -->
	<!-- typeAliasesPackage : 해당 패키지 밑 클래스명을 xml에서 parameter와 result로 사용가능 -->
	<!-- configLocation : 마이바티스 설정 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:com/nos/mm/mapper/*.xml" />
		<property name="typeAliasesPackage" value="com.nos.mm.vo" />
		<property name="configLocation" value="classpath:config/mybatis/sqlMapConfig.xml" />
	</bean>

	<!-- 마이바티스 스프링 연동 핵심모듈 -->
	<!-- 매퍼 인터페이스 + xml 방식 사용하면 없어도 됨!!! -->
	<!-- <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate"> 
		<constructor-arg index="0" ref="sqlSession" /> </bean> -->

	<!-- 매퍼 인터페이스 위치 등록 -->
	<!-- 이전 방법(다오 -> xml)과 다르게 매퍼(다오)인터페이스 -> xml로 연동 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.nos.mm.mapper" />
	</bean>

	<!-- 쿼리 로그 출력 -->
	<!-- 더이상 지원하지 않는 버전 -->
	<!--  
	<bean id="dataSource-oracle" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
	<constructor-arg ref="dataSource" />
	<property name="logFormatter">
	<bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
	<property name="loggingType" value="MULTI_LINE" />
	<property name="sqlPrefix" value="SQL : "/>
	</bean>
	</property>
	</bean>
	-->

	<!-- transaction manager 선언 -->
	<!-- <bean id="transactionManager" -->
	<!-- class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> -->
	<!-- <property name="dataSource" ref="dataSource" /> -->
	<!-- </bean> -->

	<!-- Advice 선언 -> 트랜잭션이 적용될 메소드와 속성 정의 -->

	<!-- <tx:advice id="transactionAdvice" transaction-manager="transactionManager"> -->
	<!-- <tx:attributes> -->
	<!-- <tx:method name="*" rollback-for="Exception" /> -->
	<!-- </tx:attributes> -->
	<!-- </tx:advice> -->

	<!-- 실질적으로 트랜잭션 advice가 어디서 필요한지 알려줌 -->

	<!-- <aop:config> -->
	<!-- <aop:pointcut id="transactionPointcut" expression="execution(* com.nos.mm..*(..))" -->
	<!-- /> -->
	<!-- <aop:advisor advice-ref="transactionAdvice" pointcut-ref="transactionPointcut" -->
	<!-- /> -->
	<!-- </aop:config> -->
	
	<!-- 트랜잭션: Throws Exception 시에 그 클래스에서 일어난 쿼리를 롤백 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<aop:config proxy-target-class="true">
		<aop:pointcut id="serviceOperation" expression="execution(* com.nos.mm.service*..*(..)) || execution(* com.nos.mm.mapper*..*(..))" />
		<aop:advisor id="transactionAdvisor" pointcut-ref="serviceOperation"
			advice-ref="txAdvice" />
	</aop:config>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>



	<!-- 배치를 위한 빈 -->
<!-- 	<bean id="jobRepository" class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="transactionManager" ref="transactionManager" />
	</bean>
	
	<bean id="jobRepository" class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean"
		p:dataSource-ref="dataSource" p:transactionManager-ref="transactionManager" p:isolation-level-for-create="ISOLATION_DEFAULT"
	       p:table-prefix="BATCH_" p:max-var-char-length="1000"/>

	<bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>

	<import resource="classpath:spring/jobs/job*/job*.xml" /> -->

</beans>